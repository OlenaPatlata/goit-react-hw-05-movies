{"version":3,"file":"static/js/ReviewsPage.c33f7fd5.chunk.js","mappings":"sQACA,EAAwB,uBAAxB,EAA6D,6B,SC0B7D,EAxBgB,SAAC,GAAiB,IAAfA,EAAc,EAAdA,QACjB,OACE,+BACE,wBACGA,EAAQC,OAAS,EAChBD,EAAQE,KAAI,SAAAC,GACV,OACE,2BACE,cAAGC,UAAWC,EAAd,SAAwBF,EAAKG,UAC7B,cAAGF,UAAWC,EAAd,SAA8BF,EAAKI,aAF5BC,EAAAA,EAAAA,WAOb,0ECSV,EApBoB,WAClB,IAAQC,GAAYC,EAAAA,EAAAA,MAAZD,QACR,GAA8BE,EAAAA,EAAAA,UAAS,MAAvC,eAAOC,EAAP,KAAgBC,EAAhB,KAeA,OAbAC,EAAAA,EAAAA,YAAU,YACR,iBAAC,0FACKL,EADL,0CAG+BM,EAAAA,GAA2BN,GAH1D,gBAGaT,EAHb,EAGaA,QACRa,EAAWb,GAJhB,gDAMKgB,QAAQC,IAAR,MANL,wDAAD,KAUC,CAACR,KAEG,8BAAGG,IAAW,SAAC,EAAD,CAASZ,QAASY","sources":["webpack://goit-react-hw-05-movies/./src/components/Reviews/Reviews.module.css?7248","components/Reviews/Reviews.jsx","Pages/ReviewsPage.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"title\":\"Reviews_title__LIXx+\",\"description\":\"Reviews_description__Ib0p4\"};","import { nanoid } from 'nanoid';\r\nimport PropTypes from 'prop-types';\r\nimport s from './Reviews.module.css';\r\nconst Reviews = ({ results }) => {\r\n  return (\r\n    <>\r\n      <ul>\r\n        {results.length > 0 ? (\r\n          results.map(elem => {\r\n            return (\r\n              <li key={nanoid()}>\r\n                <p className={s.title}>{elem.author}</p>\r\n                <p className={s.description}>{elem.content}</p>\r\n              </li>\r\n            );\r\n          })\r\n        ) : (\r\n          <p>We don`t have any rewiews for this movie.</p>\r\n        )}\r\n      </ul>\r\n    </>\r\n  );\r\n};\r\nReviews.propTypes = {\r\n  results: PropTypes.array,\r\n};\r\n\r\nexport default Reviews;\r\n","import { useEffect, useState } from 'react';\r\nimport { useParams, useLocation, useHistory, NavLink } from 'react-router-dom';\r\nimport * as movieAPI from 'servises/api';\r\n\r\nimport Reviews from 'components/Reviews/Reviews';\r\n\r\nconst ReviewsPage = () => {\r\n  const { movieId } = useParams();\r\n  const [reviews, setReviews] = useState(null);\r\n\r\n  useEffect(() => {\r\n    (async () => {\r\n      if (movieId) {\r\n        try {\r\n          const { results } = await movieAPI.getMovieIdReviews(movieId);\r\n          setReviews(results);\r\n        } catch (error) {\r\n          console.log(error);\r\n        }\r\n      }\r\n    })();\r\n  }, [movieId]);\r\n\r\n  return <>{reviews && <Reviews results={reviews} />}</>;\r\n};\r\n\r\nexport default ReviewsPage;\r\n"],"names":["results","length","map","elem","className","s","author","content","nanoid","movieId","useParams","useState","reviews","setReviews","useEffect","movieAPI","console","log"],"sourceRoot":""}